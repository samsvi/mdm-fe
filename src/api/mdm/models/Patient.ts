/* tslint:disable */
/* eslint-disable */
/**
 * Patient Management Api
 * Patient and Medical Records management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your-email@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface Patient
 */
export interface Patient {
  /**
   * Unique identifier of the patient
   * @type {string}
   * @memberof Patient
   */
  id: string;
  /**
   * First name of the patient
   * @type {string}
   * @memberof Patient
   */
  firstName: string;
  /**
   * Last name of the patient
   * @type {string}
   * @memberof Patient
   */
  lastName: string;
  /**
   * Date of birth
   * @type {Date}
   * @memberof Patient
   */
  dateOfBirth: Date;
  /**
   * Gender (M - male, F - female, O - other)
   * @type {string}
   * @memberof Patient
   */
  gender: PatientGenderEnum;
  /**
   * Insurance number (rodné číslo)
   * @type {string}
   * @memberof Patient
   */
  insuranceNumber: string;
  /**
   * Blood type
   * @type {string}
   * @memberof Patient
   */
  bloodType?: PatientBloodTypeEnum;
  /**
   * Current patient status
   * @type {string}
   * @memberof Patient
   */
  status?: PatientStatusEnum;
  /**
   * Patient allergies (free text)
   * @type {string}
   * @memberof Patient
   */
  allergies?: string;
  /**
   * General medical notes (free text)
   * @type {string}
   * @memberof Patient
   */
  medicalNotes?: string;
  /**
   * When the patient record was created
   * @type {Date}
   * @memberof Patient
   */
  createdAt?: Date;
  /**
   * When the patient record was last updated
   * @type {Date}
   * @memberof Patient
   */
  updatedAt?: Date;
}

/**
 * @export
 */
export const PatientGenderEnum = {
  M: 'M',
  F: 'F',
  O: 'O',
} as const;
export type PatientGenderEnum = (typeof PatientGenderEnum)[keyof typeof PatientGenderEnum];

/**
 * @export
 */
export const PatientBloodTypeEnum = {
  APositive: 'A+',
  ANegative: 'A-',
  BPositive: 'B+',
  BNegative: 'B-',
  ABPositive: 'AB+',
  ABNegative: 'AB-',
  OPositive: 'O+',
  ONegative: 'O-',
} as const;
export type PatientBloodTypeEnum = (typeof PatientBloodTypeEnum)[keyof typeof PatientBloodTypeEnum];

/**
 * @export
 */
export const PatientStatusEnum = {
  Stable: 'Stable',
  Critical: 'Critical',
  Recovering: 'Recovering',
  Discharged: 'Discharged',
} as const;
export type PatientStatusEnum = (typeof PatientStatusEnum)[keyof typeof PatientStatusEnum];

/**
 * Check if a given object implements the Patient interface.
 */
export function instanceOfPatient(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'firstName' in value;
  isInstance = isInstance && 'lastName' in value;
  isInstance = isInstance && 'dateOfBirth' in value;
  isInstance = isInstance && 'gender' in value;
  isInstance = isInstance && 'insuranceNumber' in value;

  return isInstance;
}

export function PatientFromJSON(json: any): Patient {
  return PatientFromJSONTyped(json, false);
}

export function PatientFromJSONTyped(json: any, ignoreDiscriminator: boolean): Patient {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    firstName: json['firstName'],
    lastName: json['lastName'],
    dateOfBirth: new Date(json['dateOfBirth']),
    gender: json['gender'],
    insuranceNumber: json['insuranceNumber'],
    bloodType: !exists(json, 'bloodType') ? undefined : json['bloodType'],
    status: !exists(json, 'status') ? undefined : json['status'],
    allergies: !exists(json, 'allergies') ? undefined : json['allergies'],
    medicalNotes: !exists(json, 'medicalNotes') ? undefined : json['medicalNotes'],
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
  };
}

export function PatientToJSON(value?: Patient | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    firstName: value.firstName,
    lastName: value.lastName,
    dateOfBirth: value.dateOfBirth.toISOString().substr(0, 10),
    gender: value.gender,
    insuranceNumber: value.insuranceNumber,
    bloodType: value.bloodType,
    status: value.status,
    allergies: value.allergies,
    medicalNotes: value.medicalNotes,
    createdAt: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
  };
}
