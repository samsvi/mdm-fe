/* tslint:disable */
/* eslint-disable */
/**
 * Patient Management Api
 * Patient and Medical Records management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your-email@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Medication } from './Medication';
import { MedicationFromJSON, MedicationFromJSONTyped, MedicationToJSON } from './Medication';

/**
 *
 * @export
 * @interface MedicalRecord
 */
export interface MedicalRecord {
  /**
   * Unique identifier of the medical record
   * @type {string}
   * @memberof MedicalRecord
   */
  id: string;
  /**
   * Unique identifier of the patient
   * @type {string}
   * @memberof MedicalRecord
   */
  patientId: string;
  /**
   * Date and time of the medical visit
   * @type {Date}
   * @memberof MedicalRecord
   */
  dateOfVisit: Date;
  /**
   * Primary diagnosis
   * @type {string}
   * @memberof MedicalRecord
   */
  diagnosis: string;
  /**
   * List of reported symptoms
   * @type {Array<string>}
   * @memberof MedicalRecord
   */
  symptoms?: Array<string>;
  /**
   * Prescribed treatment
   * @type {string}
   * @memberof MedicalRecord
   */
  treatment?: string;
  /**
   * List of prescribed medications
   * @type {Array<Medication>}
   * @memberof MedicalRecord
   */
  medications?: Array<Medication>;
  /**
   * Name of the attending physician
   * @type {string}
   * @memberof MedicalRecord
   */
  doctorName?: string;
  /**
   * Additional notes
   * @type {string}
   * @memberof MedicalRecord
   */
  notes?: string;
  /**
   * Date for follow-up appointment
   * @type {Date}
   * @memberof MedicalRecord
   */
  followUpDate?: Date;
  /**
   * When the record was created
   * @type {Date}
   * @memberof MedicalRecord
   */
  createdAt?: Date;
  /**
   * When the record was last updated
   * @type {Date}
   * @memberof MedicalRecord
   */
  updatedAt?: Date;
}

/**
 * Check if a given object implements the MedicalRecord interface.
 */
export function instanceOfMedicalRecord(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'patientId' in value;
  isInstance = isInstance && 'dateOfVisit' in value;
  isInstance = isInstance && 'diagnosis' in value;

  return isInstance;
}

export function MedicalRecordFromJSON(json: any): MedicalRecord {
  return MedicalRecordFromJSONTyped(json, false);
}

export function MedicalRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): MedicalRecord {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    patientId: json['patientId'],
    dateOfVisit: new Date(json['dateOfVisit']),
    diagnosis: json['diagnosis'],
    symptoms: !exists(json, 'symptoms') ? undefined : json['symptoms'],
    treatment: !exists(json, 'treatment') ? undefined : json['treatment'],
    medications: !exists(json, 'medications') ? undefined : (json['medications'] as Array<any>).map(MedicationFromJSON),
    doctorName: !exists(json, 'doctorName') ? undefined : json['doctorName'],
    notes: !exists(json, 'notes') ? undefined : json['notes'],
    followUpDate: !exists(json, 'followUpDate') ? undefined : new Date(json['followUpDate']),
    createdAt: !exists(json, 'createdAt') ? undefined : new Date(json['createdAt']),
    updatedAt: !exists(json, 'updatedAt') ? undefined : new Date(json['updatedAt']),
  };
}

export function MedicalRecordToJSON(value?: MedicalRecord | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    patientId: value.patientId,
    dateOfVisit: value.dateOfVisit.toISOString(),
    diagnosis: value.diagnosis,
    symptoms: value.symptoms,
    treatment: value.treatment,
    medications: value.medications === undefined ? undefined : (value.medications as Array<any>).map(MedicationToJSON),
    doctorName: value.doctorName,
    notes: value.notes,
    followUpDate: value.followUpDate === undefined ? undefined : value.followUpDate.toISOString().substr(0, 10),
    createdAt: value.createdAt === undefined ? undefined : value.createdAt.toISOString(),
    updatedAt: value.updatedAt === undefined ? undefined : value.updatedAt.toISOString(),
  };
}
