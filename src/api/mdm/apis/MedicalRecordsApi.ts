/* tslint:disable */
/* eslint-disable */
/**
 * Patient Management Api
 * Patient and Medical Records management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: your-email@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MedicalRecord,
} from '../models';
import {
    MedicalRecordFromJSON,
    MedicalRecordToJSON,
} from '../models';

export interface CreateMedicalRecordRequest {
    patientId: string;
    medicalRecord: MedicalRecord;
}

export interface DeleteMedicalRecordRequest {
    patientId: string;
    recordId: string;
}

export interface GetPatientMedicalRecordsRequest {
    patientId: string;
}

export interface UpdateMedicalRecordRequest {
    patientId: string;
    recordId: string;
    medicalRecord: MedicalRecord;
}

/**
 * MedicalRecordsApi - interface
 * 
 * @export
 * @interface MedicalRecordsApiInterface
 */
export interface MedicalRecordsApiInterface {
    /**
     * Use this method to create a new medical record for a specific patient
     * @summary Creates new medical record for patient
     * @param {string} patientId Unique identifier of the patient
     * @param {MedicalRecord} medicalRecord Medical record data to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApiInterface
     */
    createMedicalRecordRaw(requestParameters: CreateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MedicalRecord>>;

    /**
     * Use this method to create a new medical record for a specific patient
     * Creates new medical record for patient
     */
    createMedicalRecord(requestParameters: CreateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MedicalRecord>;

    /**
     * Use this method to delete a specific medical record
     * @summary Deletes specific medical record
     * @param {string} patientId Unique identifier of the patient
     * @param {string} recordId Unique identifier of the medical record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApiInterface
     */
    deleteMedicalRecordRaw(requestParameters: DeleteMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Use this method to delete a specific medical record
     * Deletes specific medical record
     */
    deleteMedicalRecord(requestParameters: DeleteMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Returns all medical records associated with a specific patient
     * @summary Provides all medical records for specific patient
     * @param {string} patientId Unique identifier of the patient
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApiInterface
     */
    getPatientMedicalRecordsRaw(requestParameters: GetPatientMedicalRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MedicalRecord>>>;

    /**
     * Returns all medical records associated with a specific patient
     * Provides all medical records for specific patient
     */
    getPatientMedicalRecords(requestParameters: GetPatientMedicalRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MedicalRecord>>;

    /**
     * Use this method to update a specific medical record
     * @summary Updates specific medical record
     * @param {string} patientId Unique identifier of the patient
     * @param {string} recordId Unique identifier of the medical record
     * @param {MedicalRecord} medicalRecord Medical record data to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MedicalRecordsApiInterface
     */
    updateMedicalRecordRaw(requestParameters: UpdateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MedicalRecord>>;

    /**
     * Use this method to update a specific medical record
     * Updates specific medical record
     */
    updateMedicalRecord(requestParameters: UpdateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MedicalRecord>;

}

/**
 * 
 */
export class MedicalRecordsApi extends runtime.BaseAPI implements MedicalRecordsApiInterface {

    /**
     * Use this method to create a new medical record for a specific patient
     * Creates new medical record for patient
     */
    async createMedicalRecordRaw(requestParameters: CreateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MedicalRecord>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling createMedicalRecord.');
        }

        if (requestParameters.medicalRecord === null || requestParameters.medicalRecord === undefined) {
            throw new runtime.RequiredError('medicalRecord','Required parameter requestParameters.medicalRecord was null or undefined when calling createMedicalRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{patientId}/medical-records`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters.patientId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedicalRecordToJSON(requestParameters.medicalRecord),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MedicalRecordFromJSON(jsonValue));
    }

    /**
     * Use this method to create a new medical record for a specific patient
     * Creates new medical record for patient
     */
    async createMedicalRecord(requestParameters: CreateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MedicalRecord> {
        const response = await this.createMedicalRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to delete a specific medical record
     * Deletes specific medical record
     */
    async deleteMedicalRecordRaw(requestParameters: DeleteMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling deleteMedicalRecord.');
        }

        if (requestParameters.recordId === null || requestParameters.recordId === undefined) {
            throw new runtime.RequiredError('recordId','Required parameter requestParameters.recordId was null or undefined when calling deleteMedicalRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{patientId}/medical-records/{recordId}`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters.patientId))).replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters.recordId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this method to delete a specific medical record
     * Deletes specific medical record
     */
    async deleteMedicalRecord(requestParameters: DeleteMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMedicalRecordRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all medical records associated with a specific patient
     * Provides all medical records for specific patient
     */
    async getPatientMedicalRecordsRaw(requestParameters: GetPatientMedicalRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MedicalRecord>>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling getPatientMedicalRecords.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{patientId}/medical-records`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters.patientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedicalRecordFromJSON));
    }

    /**
     * Returns all medical records associated with a specific patient
     * Provides all medical records for specific patient
     */
    async getPatientMedicalRecords(requestParameters: GetPatientMedicalRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MedicalRecord>> {
        const response = await this.getPatientMedicalRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this method to update a specific medical record
     * Updates specific medical record
     */
    async updateMedicalRecordRaw(requestParameters: UpdateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MedicalRecord>> {
        if (requestParameters.patientId === null || requestParameters.patientId === undefined) {
            throw new runtime.RequiredError('patientId','Required parameter requestParameters.patientId was null or undefined when calling updateMedicalRecord.');
        }

        if (requestParameters.recordId === null || requestParameters.recordId === undefined) {
            throw new runtime.RequiredError('recordId','Required parameter requestParameters.recordId was null or undefined when calling updateMedicalRecord.');
        }

        if (requestParameters.medicalRecord === null || requestParameters.medicalRecord === undefined) {
            throw new runtime.RequiredError('medicalRecord','Required parameter requestParameters.medicalRecord was null or undefined when calling updateMedicalRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{patientId}/medical-records/{recordId}`.replace(`{${"patientId"}}`, encodeURIComponent(String(requestParameters.patientId))).replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters.recordId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MedicalRecordToJSON(requestParameters.medicalRecord),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MedicalRecordFromJSON(jsonValue));
    }

    /**
     * Use this method to update a specific medical record
     * Updates specific medical record
     */
    async updateMedicalRecord(requestParameters: UpdateMedicalRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MedicalRecord> {
        const response = await this.updateMedicalRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
